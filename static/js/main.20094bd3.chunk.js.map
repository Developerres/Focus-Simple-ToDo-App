{"version":3,"sources":["assets/images/pc.svg","components/Header.jsx","assets/images/delete.svg","components/TaskForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","pc","alt","TaskForm","useState","taskContent","setTask","tasks","setTasksArray","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","addNewTask","id","uuidv4","done","autoFocus","type","value","placeholder","onChange","e","target","onKeyPress","key","onClick","map","m","currentTarget","deleteIcon","filter","obj","reverse","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAAe,G,YAAA,IAA0B,gC,OCc1BA,MAZf,WACE,OACE,mCACE,uCACA,+DACA,qBAAKC,UAAU,WAAf,SACE,qBAAKC,IAAKC,EAAIC,IAAI,mB,cCRX,MAA0B,mC,QCqF1BC,EAjFE,WACf,MAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA+BF,mBAAS,IAAxC,mBAAOG,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRD,EAAcE,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,MAC1D,IAEHJ,qBAAU,WACRG,aAAaE,QAAQ,QAASJ,KAAKK,UAAUR,MAC5C,CAACA,IAEJ,IAAMS,EAAa,WACjBR,EAAc,GAAD,mBACRD,GADQ,CAEX,CACEU,GAAIC,cACJb,cACAc,MAAM,MAGVb,EAAQ,KASV,OACE,gCACE,sBAAKP,UAAU,WAAf,UACE,uBACEqB,WAAS,EACTC,KAAK,OACLC,MAAOjB,EACPkB,YAAY,mBACZC,SAAU,SAACC,GACTnB,EAAQmB,EAAEC,OAAOJ,QAEnBK,WAAY,SAACF,GAhBD,UAgBkBA,EAhB1BG,KACRZ,OAiBE,uBACEK,KAAK,SACLC,MAAM,IACNO,QAAS,SAACJ,GACRT,UAIN,qBAAKjB,UAAU,YAAf,SACGQ,EACEuB,KAAI,SAACC,GAAD,OACH,sBAAKhC,UAAU,WAAf,UACE,uBACE8B,QAAS,SAACJ,GACR,OAAQA,EAAEO,cAAcjC,UAAY0B,EAAEO,cAAcjC,UAChD,GACA,eAJR,UAOE,wBAAQA,UAAU,SACjBgC,EAAE1B,eAEL,qBACEL,IAAKiC,EACL/B,IAAI,cACJH,UAAU,SACV8B,QAAS,WACPrB,EAAcD,EAAM2B,QAAO,SAACC,GAAD,OAASA,EAAIlB,KAAOc,EAAEd,YAhBxBc,EAAEd,OAqBlCmB,gBChEIC,MAXf,WACE,OACE,8BACE,sBAAKtC,UAAU,UAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UCGOuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.20094bd3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pc.d864cbfb.svg\";","import pc from \"../assets/images/pc.svg\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1>Focus</h1>\r\n      <p>let your focus on value things</p>\r\n      <div className=\"pc-image\">\r\n        <img src={pc} alt=\"User Exp\" />\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export default __webpack_public_path__ + \"static/media/delete.e4efcb06.svg\";","import { useEffect, useState } from \"react\";\r\nimport deleteIcon from \"../assets/images/delete.svg\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst TaskForm = () => {\r\n  const [taskContent, setTask] = useState(\"\");\r\n  const [tasks, setTasksArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setTasksArray(JSON.parse(localStorage.getItem(\"tasks\")) || []);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const addNewTask = () => {\r\n    setTasksArray([\r\n      ...tasks,\r\n      {\r\n        id: uuidv4(),\r\n        taskContent,\r\n        done: false,\r\n      },\r\n    ]);\r\n    setTask(\"\");\r\n  };\r\n\r\n  const keyHandler = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      addNewTask();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mainForm\">\r\n        <input\r\n          autoFocus\r\n          type=\"text\"\r\n          value={taskContent}\r\n          placeholder=\"Enter a New Task\"\r\n          onChange={(e) => {\r\n            setTask(e.target.value);\r\n          }}\r\n          onKeyPress={(e) => keyHandler(e)}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"+\"\r\n          onClick={(e) => {\r\n            addNewTask();\r\n          }}\r\n        />\r\n      </div>\r\n      <div className=\"task-list\">\r\n        {tasks\r\n          .map((m) => (\r\n            <div className=\"taskItem\" key={m.id}>\r\n              <span\r\n                onClick={(e) => {\r\n                  return (e.currentTarget.className = e.currentTarget.className\r\n                    ? \"\"\r\n                    : \"lineThrough\");\r\n                }}\r\n              >\r\n                <button className=\"open\"></button>\r\n                {m.taskContent}\r\n              </span>\r\n              <img\r\n                src={deleteIcon}\r\n                alt=\"Delete Task\"\r\n                className=\"delete\"\r\n                onClick={() => {\r\n                  setTasksArray(tasks.filter((obj) => obj.id !== m.id));\r\n                }}\r\n              />\r\n            </div>\r\n          ))\r\n          .reverse()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskForm;\r\n","import \"./App.css\";\nimport Header from \"./components/Header\";\nimport TaskForm from \"./components/TaskForm\";\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"wrapper\">\n        <Header />\n        <TaskForm />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}